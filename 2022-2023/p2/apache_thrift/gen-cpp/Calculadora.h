/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculadora_H
#define Calculadora_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "calculadora_types.h"

// Incluido de forma manual
std::string vectorToString(const Vector &v);

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalculadoraIf {
 public:
  virtual ~CalculadoraIf() {}
  virtual void ping() = 0;
  virtual double suma(const double n1, const double n2) = 0;
  virtual double resta(const double n1, const double n2) = 0;
  virtual double multiplica(const double n1, const double n2) = 0;
  virtual double divide(const double n1, const double n2) = 0;
  virtual double calcularCadena(const std::string& cadena) = 0;
  virtual void sumaVectores(Vector& _return, const Vector& v1, const Vector& v2) = 0;
  virtual void restaVectores(Vector& _return, const Vector& v1, const Vector& v2) = 0;
  virtual void productoVectorEscalar(Vector& _return, const Vector& vector, const double escalar) = 0;
  virtual void productoVectorial(Vector& _return, const Vector& v1, const Vector& v2) = 0;
};

class CalculadoraIfFactory {
 public:
  typedef CalculadoraIf Handler;

  virtual ~CalculadoraIfFactory() {}

  virtual CalculadoraIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculadoraIf* /* handler */) = 0;
  };

class CalculadoraIfSingletonFactory : virtual public CalculadoraIfFactory {
 public:
  CalculadoraIfSingletonFactory(const ::std::shared_ptr<CalculadoraIf>& iface) : iface_(iface) {}
  virtual ~CalculadoraIfSingletonFactory() {}

  virtual CalculadoraIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(CalculadoraIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<CalculadoraIf> iface_;
};

class CalculadoraNull : virtual public CalculadoraIf {
 public:
  virtual ~CalculadoraNull() {}
  void ping() override {
    return;
  }
  double suma(const double /* n1 */, const double /* n2 */) override {
    double _return = 0.0;
    return _return;
  }
  double resta(const double /* n1 */, const double /* n2 */) override {
    double _return = 0.0;
    return _return;
  }
  double multiplica(const double /* n1 */, const double /* n2 */) override {
    double _return = 0.0;
    return _return;
  }
  double divide(const double /* n1 */, const double /* n2 */) override {
    double _return = 0.0;
    return _return;
  }
  double calcularCadena(const std::string& /* cadena */) override {
    double _return = 0.0;
    return _return;
  }
  void sumaVectores(Vector& /* _return */, const Vector& /* v1 */, const Vector& /* v2 */) override {
    return;
  }
  void restaVectores(Vector& /* _return */, const Vector& /* v1 */, const Vector& /* v2 */) override {
    return;
  }
  void productoVectorEscalar(Vector& /* _return */, const Vector& /* vector */, const double /* escalar */) override {
    return;
  }
  void productoVectorial(Vector& /* _return */, const Vector& /* v1 */, const Vector& /* v2 */) override {
    return;
  }
};


class Calculadora_ping_args {
 public:

  Calculadora_ping_args(const Calculadora_ping_args&) noexcept;
  Calculadora_ping_args& operator=(const Calculadora_ping_args&) noexcept;
  Calculadora_ping_args() noexcept {
  }

  virtual ~Calculadora_ping_args() noexcept;

  bool operator == (const Calculadora_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculadora_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_ping_pargs {
 public:


  virtual ~Calculadora_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_ping_result {
 public:

  Calculadora_ping_result(const Calculadora_ping_result&) noexcept;
  Calculadora_ping_result& operator=(const Calculadora_ping_result&) noexcept;
  Calculadora_ping_result() noexcept {
  }

  virtual ~Calculadora_ping_result() noexcept;

  bool operator == (const Calculadora_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculadora_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_ping_presult {
 public:


  virtual ~Calculadora_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_suma_args__isset {
  _Calculadora_suma_args__isset() : n1(false), n2(false) {}
  bool n1 :1;
  bool n2 :1;
} _Calculadora_suma_args__isset;

class Calculadora_suma_args {
 public:

  Calculadora_suma_args(const Calculadora_suma_args&) noexcept;
  Calculadora_suma_args& operator=(const Calculadora_suma_args&) noexcept;
  Calculadora_suma_args() noexcept
                        : n1(0),
                          n2(0) {
  }

  virtual ~Calculadora_suma_args() noexcept;
  double n1;
  double n2;

  _Calculadora_suma_args__isset __isset;

  void __set_n1(const double val);

  void __set_n2(const double val);

  bool operator == (const Calculadora_suma_args & rhs) const
  {
    if (!(n1 == rhs.n1))
      return false;
    if (!(n2 == rhs.n2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_suma_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_suma_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_suma_pargs {
 public:


  virtual ~Calculadora_suma_pargs() noexcept;
  const double* n1;
  const double* n2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_suma_result__isset {
  _Calculadora_suma_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_suma_result__isset;

class Calculadora_suma_result {
 public:

  Calculadora_suma_result(const Calculadora_suma_result&) noexcept;
  Calculadora_suma_result& operator=(const Calculadora_suma_result&) noexcept;
  Calculadora_suma_result() noexcept
                          : success(0) {
  }

  virtual ~Calculadora_suma_result() noexcept;
  double success;

  _Calculadora_suma_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_suma_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_suma_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_suma_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_suma_presult__isset {
  _Calculadora_suma_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_suma_presult__isset;

class Calculadora_suma_presult {
 public:


  virtual ~Calculadora_suma_presult() noexcept;
  double* success;

  _Calculadora_suma_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_resta_args__isset {
  _Calculadora_resta_args__isset() : n1(false), n2(false) {}
  bool n1 :1;
  bool n2 :1;
} _Calculadora_resta_args__isset;

class Calculadora_resta_args {
 public:

  Calculadora_resta_args(const Calculadora_resta_args&) noexcept;
  Calculadora_resta_args& operator=(const Calculadora_resta_args&) noexcept;
  Calculadora_resta_args() noexcept
                         : n1(0),
                           n2(0) {
  }

  virtual ~Calculadora_resta_args() noexcept;
  double n1;
  double n2;

  _Calculadora_resta_args__isset __isset;

  void __set_n1(const double val);

  void __set_n2(const double val);

  bool operator == (const Calculadora_resta_args & rhs) const
  {
    if (!(n1 == rhs.n1))
      return false;
    if (!(n2 == rhs.n2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_resta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_resta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_resta_pargs {
 public:


  virtual ~Calculadora_resta_pargs() noexcept;
  const double* n1;
  const double* n2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_resta_result__isset {
  _Calculadora_resta_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_resta_result__isset;

class Calculadora_resta_result {
 public:

  Calculadora_resta_result(const Calculadora_resta_result&) noexcept;
  Calculadora_resta_result& operator=(const Calculadora_resta_result&) noexcept;
  Calculadora_resta_result() noexcept
                           : success(0) {
  }

  virtual ~Calculadora_resta_result() noexcept;
  double success;

  _Calculadora_resta_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_resta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_resta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_resta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_resta_presult__isset {
  _Calculadora_resta_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_resta_presult__isset;

class Calculadora_resta_presult {
 public:


  virtual ~Calculadora_resta_presult() noexcept;
  double* success;

  _Calculadora_resta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_multiplica_args__isset {
  _Calculadora_multiplica_args__isset() : n1(false), n2(false) {}
  bool n1 :1;
  bool n2 :1;
} _Calculadora_multiplica_args__isset;

class Calculadora_multiplica_args {
 public:

  Calculadora_multiplica_args(const Calculadora_multiplica_args&) noexcept;
  Calculadora_multiplica_args& operator=(const Calculadora_multiplica_args&) noexcept;
  Calculadora_multiplica_args() noexcept
                              : n1(0),
                                n2(0) {
  }

  virtual ~Calculadora_multiplica_args() noexcept;
  double n1;
  double n2;

  _Calculadora_multiplica_args__isset __isset;

  void __set_n1(const double val);

  void __set_n2(const double val);

  bool operator == (const Calculadora_multiplica_args & rhs) const
  {
    if (!(n1 == rhs.n1))
      return false;
    if (!(n2 == rhs.n2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_multiplica_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_multiplica_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_multiplica_pargs {
 public:


  virtual ~Calculadora_multiplica_pargs() noexcept;
  const double* n1;
  const double* n2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_multiplica_result__isset {
  _Calculadora_multiplica_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_multiplica_result__isset;

class Calculadora_multiplica_result {
 public:

  Calculadora_multiplica_result(const Calculadora_multiplica_result&) noexcept;
  Calculadora_multiplica_result& operator=(const Calculadora_multiplica_result&) noexcept;
  Calculadora_multiplica_result() noexcept
                                : success(0) {
  }

  virtual ~Calculadora_multiplica_result() noexcept;
  double success;

  _Calculadora_multiplica_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_multiplica_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_multiplica_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_multiplica_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_multiplica_presult__isset {
  _Calculadora_multiplica_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_multiplica_presult__isset;

class Calculadora_multiplica_presult {
 public:


  virtual ~Calculadora_multiplica_presult() noexcept;
  double* success;

  _Calculadora_multiplica_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_divide_args__isset {
  _Calculadora_divide_args__isset() : n1(false), n2(false) {}
  bool n1 :1;
  bool n2 :1;
} _Calculadora_divide_args__isset;

class Calculadora_divide_args {
 public:

  Calculadora_divide_args(const Calculadora_divide_args&) noexcept;
  Calculadora_divide_args& operator=(const Calculadora_divide_args&) noexcept;
  Calculadora_divide_args() noexcept
                          : n1(0),
                            n2(0) {
  }

  virtual ~Calculadora_divide_args() noexcept;
  double n1;
  double n2;

  _Calculadora_divide_args__isset __isset;

  void __set_n1(const double val);

  void __set_n2(const double val);

  bool operator == (const Calculadora_divide_args & rhs) const
  {
    if (!(n1 == rhs.n1))
      return false;
    if (!(n2 == rhs.n2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_divide_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_divide_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_divide_pargs {
 public:


  virtual ~Calculadora_divide_pargs() noexcept;
  const double* n1;
  const double* n2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_divide_result__isset {
  _Calculadora_divide_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_divide_result__isset;

class Calculadora_divide_result {
 public:

  Calculadora_divide_result(const Calculadora_divide_result&) noexcept;
  Calculadora_divide_result& operator=(const Calculadora_divide_result&) noexcept;
  Calculadora_divide_result() noexcept
                            : success(0) {
  }

  virtual ~Calculadora_divide_result() noexcept;
  double success;

  _Calculadora_divide_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_divide_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_divide_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_divide_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_divide_presult__isset {
  _Calculadora_divide_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_divide_presult__isset;

class Calculadora_divide_presult {
 public:


  virtual ~Calculadora_divide_presult() noexcept;
  double* success;

  _Calculadora_divide_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_calcularCadena_args__isset {
  _Calculadora_calcularCadena_args__isset() : cadena(false) {}
  bool cadena :1;
} _Calculadora_calcularCadena_args__isset;

class Calculadora_calcularCadena_args {
 public:

  Calculadora_calcularCadena_args(const Calculadora_calcularCadena_args&);
  Calculadora_calcularCadena_args& operator=(const Calculadora_calcularCadena_args&);
  Calculadora_calcularCadena_args() noexcept
                                  : cadena() {
  }

  virtual ~Calculadora_calcularCadena_args() noexcept;
  std::string cadena;

  _Calculadora_calcularCadena_args__isset __isset;

  void __set_cadena(const std::string& val);

  bool operator == (const Calculadora_calcularCadena_args & rhs) const
  {
    if (!(cadena == rhs.cadena))
      return false;
    return true;
  }
  bool operator != (const Calculadora_calcularCadena_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_calcularCadena_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_calcularCadena_pargs {
 public:


  virtual ~Calculadora_calcularCadena_pargs() noexcept;
  const std::string* cadena;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_calcularCadena_result__isset {
  _Calculadora_calcularCadena_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_calcularCadena_result__isset;

class Calculadora_calcularCadena_result {
 public:

  Calculadora_calcularCadena_result(const Calculadora_calcularCadena_result&) noexcept;
  Calculadora_calcularCadena_result& operator=(const Calculadora_calcularCadena_result&) noexcept;
  Calculadora_calcularCadena_result() noexcept
                                    : success(0) {
  }

  virtual ~Calculadora_calcularCadena_result() noexcept;
  double success;

  _Calculadora_calcularCadena_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_calcularCadena_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_calcularCadena_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_calcularCadena_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_calcularCadena_presult__isset {
  _Calculadora_calcularCadena_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_calcularCadena_presult__isset;

class Calculadora_calcularCadena_presult {
 public:


  virtual ~Calculadora_calcularCadena_presult() noexcept;
  double* success;

  _Calculadora_calcularCadena_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_sumaVectores_args__isset {
  _Calculadora_sumaVectores_args__isset() : v1(false), v2(false) {}
  bool v1 :1;
  bool v2 :1;
} _Calculadora_sumaVectores_args__isset;

class Calculadora_sumaVectores_args {
 public:

  Calculadora_sumaVectores_args(const Calculadora_sumaVectores_args&);
  Calculadora_sumaVectores_args& operator=(const Calculadora_sumaVectores_args&);
  Calculadora_sumaVectores_args() noexcept {
  }

  virtual ~Calculadora_sumaVectores_args() noexcept;
  Vector v1;
  Vector v2;

  _Calculadora_sumaVectores_args__isset __isset;

  void __set_v1(const Vector& val);

  void __set_v2(const Vector& val);

  bool operator == (const Calculadora_sumaVectores_args & rhs) const
  {
    if (!(v1 == rhs.v1))
      return false;
    if (!(v2 == rhs.v2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_sumaVectores_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_sumaVectores_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_sumaVectores_pargs {
 public:


  virtual ~Calculadora_sumaVectores_pargs() noexcept;
  const Vector* v1;
  const Vector* v2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_sumaVectores_result__isset {
  _Calculadora_sumaVectores_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_sumaVectores_result__isset;

class Calculadora_sumaVectores_result {
 public:

  Calculadora_sumaVectores_result(const Calculadora_sumaVectores_result&);
  Calculadora_sumaVectores_result& operator=(const Calculadora_sumaVectores_result&);
  Calculadora_sumaVectores_result() noexcept {
  }

  virtual ~Calculadora_sumaVectores_result() noexcept;
  Vector success;

  _Calculadora_sumaVectores_result__isset __isset;

  void __set_success(const Vector& val);

  bool operator == (const Calculadora_sumaVectores_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_sumaVectores_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_sumaVectores_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_sumaVectores_presult__isset {
  _Calculadora_sumaVectores_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_sumaVectores_presult__isset;

class Calculadora_sumaVectores_presult {
 public:


  virtual ~Calculadora_sumaVectores_presult() noexcept;
  Vector* success;

  _Calculadora_sumaVectores_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_restaVectores_args__isset {
  _Calculadora_restaVectores_args__isset() : v1(false), v2(false) {}
  bool v1 :1;
  bool v2 :1;
} _Calculadora_restaVectores_args__isset;

class Calculadora_restaVectores_args {
 public:

  Calculadora_restaVectores_args(const Calculadora_restaVectores_args&);
  Calculadora_restaVectores_args& operator=(const Calculadora_restaVectores_args&);
  Calculadora_restaVectores_args() noexcept {
  }

  virtual ~Calculadora_restaVectores_args() noexcept;
  Vector v1;
  Vector v2;

  _Calculadora_restaVectores_args__isset __isset;

  void __set_v1(const Vector& val);

  void __set_v2(const Vector& val);

  bool operator == (const Calculadora_restaVectores_args & rhs) const
  {
    if (!(v1 == rhs.v1))
      return false;
    if (!(v2 == rhs.v2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_restaVectores_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_restaVectores_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_restaVectores_pargs {
 public:


  virtual ~Calculadora_restaVectores_pargs() noexcept;
  const Vector* v1;
  const Vector* v2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_restaVectores_result__isset {
  _Calculadora_restaVectores_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_restaVectores_result__isset;

class Calculadora_restaVectores_result {
 public:

  Calculadora_restaVectores_result(const Calculadora_restaVectores_result&);
  Calculadora_restaVectores_result& operator=(const Calculadora_restaVectores_result&);
  Calculadora_restaVectores_result() noexcept {
  }

  virtual ~Calculadora_restaVectores_result() noexcept;
  Vector success;

  _Calculadora_restaVectores_result__isset __isset;

  void __set_success(const Vector& val);

  bool operator == (const Calculadora_restaVectores_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_restaVectores_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_restaVectores_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_restaVectores_presult__isset {
  _Calculadora_restaVectores_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_restaVectores_presult__isset;

class Calculadora_restaVectores_presult {
 public:


  virtual ~Calculadora_restaVectores_presult() noexcept;
  Vector* success;

  _Calculadora_restaVectores_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_productoVectorEscalar_args__isset {
  _Calculadora_productoVectorEscalar_args__isset() : vector(false), escalar(false) {}
  bool vector :1;
  bool escalar :1;
} _Calculadora_productoVectorEscalar_args__isset;

class Calculadora_productoVectorEscalar_args {
 public:

  Calculadora_productoVectorEscalar_args(const Calculadora_productoVectorEscalar_args&);
  Calculadora_productoVectorEscalar_args& operator=(const Calculadora_productoVectorEscalar_args&);
  Calculadora_productoVectorEscalar_args() noexcept
                                         : escalar(0) {
  }

  virtual ~Calculadora_productoVectorEscalar_args() noexcept;
  Vector vector;
  double escalar;

  _Calculadora_productoVectorEscalar_args__isset __isset;

  void __set_vector(const Vector& val);

  void __set_escalar(const double val);

  bool operator == (const Calculadora_productoVectorEscalar_args & rhs) const
  {
    if (!(vector == rhs.vector))
      return false;
    if (!(escalar == rhs.escalar))
      return false;
    return true;
  }
  bool operator != (const Calculadora_productoVectorEscalar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_productoVectorEscalar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_productoVectorEscalar_pargs {
 public:


  virtual ~Calculadora_productoVectorEscalar_pargs() noexcept;
  const Vector* vector;
  const double* escalar;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_productoVectorEscalar_result__isset {
  _Calculadora_productoVectorEscalar_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_productoVectorEscalar_result__isset;

class Calculadora_productoVectorEscalar_result {
 public:

  Calculadora_productoVectorEscalar_result(const Calculadora_productoVectorEscalar_result&);
  Calculadora_productoVectorEscalar_result& operator=(const Calculadora_productoVectorEscalar_result&);
  Calculadora_productoVectorEscalar_result() noexcept {
  }

  virtual ~Calculadora_productoVectorEscalar_result() noexcept;
  Vector success;

  _Calculadora_productoVectorEscalar_result__isset __isset;

  void __set_success(const Vector& val);

  bool operator == (const Calculadora_productoVectorEscalar_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_productoVectorEscalar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_productoVectorEscalar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_productoVectorEscalar_presult__isset {
  _Calculadora_productoVectorEscalar_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_productoVectorEscalar_presult__isset;

class Calculadora_productoVectorEscalar_presult {
 public:


  virtual ~Calculadora_productoVectorEscalar_presult() noexcept;
  Vector* success;

  _Calculadora_productoVectorEscalar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_productoVectorial_args__isset {
  _Calculadora_productoVectorial_args__isset() : v1(false), v2(false) {}
  bool v1 :1;
  bool v2 :1;
} _Calculadora_productoVectorial_args__isset;

class Calculadora_productoVectorial_args {
 public:

  Calculadora_productoVectorial_args(const Calculadora_productoVectorial_args&);
  Calculadora_productoVectorial_args& operator=(const Calculadora_productoVectorial_args&);
  Calculadora_productoVectorial_args() noexcept {
  }

  virtual ~Calculadora_productoVectorial_args() noexcept;
  Vector v1;
  Vector v2;

  _Calculadora_productoVectorial_args__isset __isset;

  void __set_v1(const Vector& val);

  void __set_v2(const Vector& val);

  bool operator == (const Calculadora_productoVectorial_args & rhs) const
  {
    if (!(v1 == rhs.v1))
      return false;
    if (!(v2 == rhs.v2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_productoVectorial_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_productoVectorial_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_productoVectorial_pargs {
 public:


  virtual ~Calculadora_productoVectorial_pargs() noexcept;
  const Vector* v1;
  const Vector* v2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_productoVectorial_result__isset {
  _Calculadora_productoVectorial_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_productoVectorial_result__isset;

class Calculadora_productoVectorial_result {
 public:

  Calculadora_productoVectorial_result(const Calculadora_productoVectorial_result&);
  Calculadora_productoVectorial_result& operator=(const Calculadora_productoVectorial_result&);
  Calculadora_productoVectorial_result() noexcept {
  }

  virtual ~Calculadora_productoVectorial_result() noexcept;
  Vector success;

  _Calculadora_productoVectorial_result__isset __isset;

  void __set_success(const Vector& val);

  bool operator == (const Calculadora_productoVectorial_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_productoVectorial_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_productoVectorial_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_productoVectorial_presult__isset {
  _Calculadora_productoVectorial_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_productoVectorial_presult__isset;

class Calculadora_productoVectorial_presult {
 public:


  virtual ~Calculadora_productoVectorial_presult() noexcept;
  Vector* success;

  _Calculadora_productoVectorial_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculadoraClient : virtual public CalculadoraIf {
 public:
  CalculadoraClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculadoraClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping() override;
  void send_ping();
  void recv_ping();
  double suma(const double n1, const double n2) override;
  void send_suma(const double n1, const double n2);
  double recv_suma();
  double resta(const double n1, const double n2) override;
  void send_resta(const double n1, const double n2);
  double recv_resta();
  double multiplica(const double n1, const double n2) override;
  void send_multiplica(const double n1, const double n2);
  double recv_multiplica();
  double divide(const double n1, const double n2) override;
  void send_divide(const double n1, const double n2);
  double recv_divide();
  double calcularCadena(const std::string& cadena) override;
  void send_calcularCadena(const std::string& cadena);
  double recv_calcularCadena();
  void sumaVectores(Vector& _return, const Vector& v1, const Vector& v2) override;
  void send_sumaVectores(const Vector& v1, const Vector& v2);
  void recv_sumaVectores(Vector& _return);
  void restaVectores(Vector& _return, const Vector& v1, const Vector& v2) override;
  void send_restaVectores(const Vector& v1, const Vector& v2);
  void recv_restaVectores(Vector& _return);
  void productoVectorEscalar(Vector& _return, const Vector& vector, const double escalar) override;
  void send_productoVectorEscalar(const Vector& vector, const double escalar);
  void recv_productoVectorEscalar(Vector& _return);
  void productoVectorial(Vector& _return, const Vector& v1, const Vector& v2) override;
  void send_productoVectorial(const Vector& v1, const Vector& v2);
  void recv_productoVectorial(Vector& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculadoraProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<CalculadoraIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (CalculadoraProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_suma(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiplica(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_divide(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_calcularCadena(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sumaVectores(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_restaVectores(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_productoVectorEscalar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_productoVectorial(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculadoraProcessor(::std::shared_ptr<CalculadoraIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &CalculadoraProcessor::process_ping;
    processMap_["suma"] = &CalculadoraProcessor::process_suma;
    processMap_["resta"] = &CalculadoraProcessor::process_resta;
    processMap_["multiplica"] = &CalculadoraProcessor::process_multiplica;
    processMap_["divide"] = &CalculadoraProcessor::process_divide;
    processMap_["calcularCadena"] = &CalculadoraProcessor::process_calcularCadena;
    processMap_["sumaVectores"] = &CalculadoraProcessor::process_sumaVectores;
    processMap_["restaVectores"] = &CalculadoraProcessor::process_restaVectores;
    processMap_["productoVectorEscalar"] = &CalculadoraProcessor::process_productoVectorEscalar;
    processMap_["productoVectorial"] = &CalculadoraProcessor::process_productoVectorial;
  }

  virtual ~CalculadoraProcessor() {}
};

class CalculadoraProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculadoraProcessorFactory(const ::std::shared_ptr< CalculadoraIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< CalculadoraIfFactory > handlerFactory_;
};

class CalculadoraMultiface : virtual public CalculadoraIf {
 public:
  CalculadoraMultiface(std::vector<std::shared_ptr<CalculadoraIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculadoraMultiface() {}
 protected:
  std::vector<std::shared_ptr<CalculadoraIf> > ifaces_;
  CalculadoraMultiface() {}
  void add(::std::shared_ptr<CalculadoraIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  double suma(const double n1, const double n2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->suma(n1, n2);
    }
    return ifaces_[i]->suma(n1, n2);
  }

  double resta(const double n1, const double n2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resta(n1, n2);
    }
    return ifaces_[i]->resta(n1, n2);
  }

  double multiplica(const double n1, const double n2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiplica(n1, n2);
    }
    return ifaces_[i]->multiplica(n1, n2);
  }

  double divide(const double n1, const double n2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->divide(n1, n2);
    }
    return ifaces_[i]->divide(n1, n2);
  }

  double calcularCadena(const std::string& cadena) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calcularCadena(cadena);
    }
    return ifaces_[i]->calcularCadena(cadena);
  }

  void sumaVectores(Vector& _return, const Vector& v1, const Vector& v2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sumaVectores(_return, v1, v2);
    }
    ifaces_[i]->sumaVectores(_return, v1, v2);
    return;
  }

  void restaVectores(Vector& _return, const Vector& v1, const Vector& v2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->restaVectores(_return, v1, v2);
    }
    ifaces_[i]->restaVectores(_return, v1, v2);
    return;
  }

  void productoVectorEscalar(Vector& _return, const Vector& vector, const double escalar) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->productoVectorEscalar(_return, vector, escalar);
    }
    ifaces_[i]->productoVectorEscalar(_return, vector, escalar);
    return;
  }

  void productoVectorial(Vector& _return, const Vector& v1, const Vector& v2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->productoVectorial(_return, v1, v2);
    }
    ifaces_[i]->productoVectorial(_return, v1, v2);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalculadoraConcurrentClient : virtual public CalculadoraIf {
 public:
  CalculadoraConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  CalculadoraConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping() override;
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  double suma(const double n1, const double n2) override;
  int32_t send_suma(const double n1, const double n2);
  double recv_suma(const int32_t seqid);
  double resta(const double n1, const double n2) override;
  int32_t send_resta(const double n1, const double n2);
  double recv_resta(const int32_t seqid);
  double multiplica(const double n1, const double n2) override;
  int32_t send_multiplica(const double n1, const double n2);
  double recv_multiplica(const int32_t seqid);
  double divide(const double n1, const double n2) override;
  int32_t send_divide(const double n1, const double n2);
  double recv_divide(const int32_t seqid);
  double calcularCadena(const std::string& cadena) override;
  int32_t send_calcularCadena(const std::string& cadena);
  double recv_calcularCadena(const int32_t seqid);
  void sumaVectores(Vector& _return, const Vector& v1, const Vector& v2) override;
  int32_t send_sumaVectores(const Vector& v1, const Vector& v2);
  void recv_sumaVectores(Vector& _return, const int32_t seqid);
  void restaVectores(Vector& _return, const Vector& v1, const Vector& v2) override;
  int32_t send_restaVectores(const Vector& v1, const Vector& v2);
  void recv_restaVectores(Vector& _return, const int32_t seqid);
  void productoVectorEscalar(Vector& _return, const Vector& vector, const double escalar) override;
  int32_t send_productoVectorEscalar(const Vector& vector, const double escalar);
  void recv_productoVectorEscalar(Vector& _return, const int32_t seqid);
  void productoVectorial(Vector& _return, const Vector& v1, const Vector& v2) override;
  int32_t send_productoVectorial(const Vector& v1, const Vector& v2);
  void recv_productoVectorial(Vector& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif

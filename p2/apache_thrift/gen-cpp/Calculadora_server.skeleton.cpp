// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Calculadora.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class CalculadoraHandler : virtual public CalculadoraIf {
 public:
  CalculadoraHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  double suma(const double n1, const double n2) {
    // Your implementation goes here
    printf("suma\n");
  }

  double resta(const double n1, const double n2) {
    // Your implementation goes here
    printf("resta\n");
  }

  double multiplica(const double n1, const double n2) {
    // Your implementation goes here
    printf("multiplica\n");
  }

  double divide(const double n1, const double n2) {
    // Your implementation goes here
    printf("divide\n");
  }

  double calcularCadena(const std::string& cadena) {
    // Your implementation goes here
    printf("calcularCadena\n");
  }

  void sumaVectores(Vector& _return, const Vector& v1, const Vector& v2) {
    // Your implementation goes here
    printf("sumaVectores\n");
  }

  void restaVectores(Vector& _return, const Vector& v1, const Vector& v2) {
    // Your implementation goes here
    printf("restaVectores\n");
  }

  void productoVectorEscalar(Vector& _return, const Vector& vector, const double escalar) {
    // Your implementation goes here
    printf("productoVectorEscalar\n");
  }

  void productoVectorial(Vector& _return, const Vector& v1, const Vector& v2) {
    // Your implementation goes here
    printf("productoVectorial\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<CalculadoraHandler> handler(new CalculadoraHandler());
  ::std::shared_ptr<TProcessor> processor(new CalculadoraProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}


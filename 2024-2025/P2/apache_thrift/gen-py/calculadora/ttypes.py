#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TipoOperador(object):
    SUMA = 1
    RESTA = 2
    MULTIPLICACION = 3
    DIVISION = 4

    _VALUES_TO_NAMES = {
        1: "SUMA",
        2: "RESTA",
        3: "MULTIPLICACION",
        4: "DIVISION",
    }

    _NAMES_TO_VALUES = {
        "SUMA": 1,
        "RESTA": 2,
        "MULTIPLICACION": 3,
        "DIVISION": 4,
    }


class Operacion(object):
    """
    Attributes:
     - operando1
     - operador
     - operando2

    """


    def __init__(self, operando1=None, operador=None, operando2=None,):
        self.operando1 = operando1
        self.operador = operador
        self.operando2 = operando2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.operando1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.operador = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.operando2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Operacion')
        if self.operando1 is not None:
            oprot.writeFieldBegin('operando1', TType.DOUBLE, 1)
            oprot.writeDouble(self.operando1)
            oprot.writeFieldEnd()
        if self.operador is not None:
            oprot.writeFieldBegin('operador', TType.I32, 2)
            oprot.writeI32(self.operador)
            oprot.writeFieldEnd()
        if self.operando2 is not None:
            oprot.writeFieldBegin('operando2', TType.DOUBLE, 3)
            oprot.writeDouble(self.operando2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operando1 is None:
            raise TProtocolException(message='Required field operando1 is unset!')
        if self.operador is None:
            raise TProtocolException(message='Required field operador is unset!')
        if self.operando2 is None:
            raise TProtocolException(message='Required field operando2 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Operacion)
Operacion.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'operando1', None, None, ),  # 1
    (2, TType.I32, 'operador', None, None, ),  # 2
    (3, TType.DOUBLE, 'operando2', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs

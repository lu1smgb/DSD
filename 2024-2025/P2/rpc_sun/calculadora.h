/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef double Numero;

typedef char Operador;

struct Operacion {
	Numero operando1;
	Operador operador;
	Numero operando2;
};
typedef struct Operacion Operacion;

struct ResultadoNumerico {
	int errnum;
	union {
		Numero resultado;
	} ResultadoNumerico_u;
};
typedef struct ResultadoNumerico ResultadoNumerico;
#define MAX_VECTOR 10

typedef struct {
	u_int ValoresVector_len;
	Numero *ValoresVector_val;
} ValoresVector;

struct Vector {
	int dim;
	ValoresVector valores;
};
typedef struct Vector Vector;

struct OperacionVectorial {
	Vector vector1;
	Operador operador;
	Vector vector2;
};
typedef struct OperacionVectorial OperacionVectorial;

struct ResultadoVectorial {
	int errnum;
	union {
		Vector resultado;
	} ResultadoVectorial_u;
};
typedef struct ResultadoVectorial ResultadoVectorial;

struct OperacionCompuesta {
	struct {
		u_int operandos_len;
		Numero *operandos_val;
	} operandos;
	struct {
		u_int operadores_len;
		Operador *operadores_val;
	} operadores;
};
typedef struct OperacionCompuesta OperacionCompuesta;

#define CALCULADORA 0x30005000
#define BASICA 1

#if defined(__STDC__) || defined(__cplusplus)
#define CALCULAR 1
extern  ResultadoNumerico * calcular_1(Operacion , CLIENT *);
extern  ResultadoNumerico * calcular_1_svc(Operacion , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define CALCULAR 1
extern  ResultadoNumerico * calcular_1();
extern  ResultadoNumerico * calcular_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */
#define VECTORIAL 2

#if defined(__STDC__) || defined(__cplusplus)
extern  ResultadoVectorial * calcular_2(OperacionVectorial , CLIENT *);
extern  ResultadoVectorial * calcular_2_svc(OperacionVectorial , struct svc_req *);
extern int calculadora_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
extern  ResultadoVectorial * calcular_2();
extern  ResultadoVectorial * calcular_2_svc();
extern int calculadora_2_freeresult ();
#endif /* K&R C */
#define COMPUESTA 3

#if defined(__STDC__) || defined(__cplusplus)
extern  ResultadoNumerico * calcular_3(OperacionCompuesta , CLIENT *);
extern  ResultadoNumerico * calcular_3_svc(OperacionCompuesta , struct svc_req *);
extern int calculadora_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
extern  ResultadoNumerico * calcular_3();
extern  ResultadoNumerico * calcular_3_svc();
extern int calculadora_3_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_Numero (XDR *, Numero*);
extern  bool_t xdr_Operador (XDR *, Operador*);
extern  bool_t xdr_Operacion (XDR *, Operacion*);
extern  bool_t xdr_ResultadoNumerico (XDR *, ResultadoNumerico*);
extern  bool_t xdr_ValoresVector (XDR *, ValoresVector*);
extern  bool_t xdr_Vector (XDR *, Vector*);
extern  bool_t xdr_OperacionVectorial (XDR *, OperacionVectorial*);
extern  bool_t xdr_ResultadoVectorial (XDR *, ResultadoVectorial*);
extern  bool_t xdr_OperacionCompuesta (XDR *, OperacionCompuesta*);

#else /* K&R C */
extern bool_t xdr_Numero ();
extern bool_t xdr_Operador ();
extern bool_t xdr_Operacion ();
extern bool_t xdr_ResultadoNumerico ();
extern bool_t xdr_ValoresVector ();
extern bool_t xdr_Vector ();
extern bool_t xdr_OperacionVectorial ();
extern bool_t xdr_ResultadoVectorial ();
extern bool_t xdr_OperacionCompuesta ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
